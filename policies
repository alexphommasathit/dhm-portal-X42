

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA "extensions";






CREATE TYPE "public"."user_role" AS ENUM (
    'financial_admin',
    'clinician',
    'assistant',
    'hr_admin',
    'administrator',
    'hha',
    'patient',
    'family_caregiver',
    'case_manager',
    'referral_source',
    'unassigned'
);


ALTER TYPE "public"."user_role" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."create_patient"("p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_gender" "text" DEFAULT NULL::"text", "p_phone_number" "text" DEFAULT NULL::"text", "p_email" "text" DEFAULT NULL::"text", "p_address_line1" "text" DEFAULT NULL::"text", "p_address_line2" "text" DEFAULT NULL::"text", "p_city" "text" DEFAULT NULL::"text", "p_state" "text" DEFAULT NULL::"text", "p_zip_code" "text" DEFAULT NULL::"text", "p_profile_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("id" "uuid", "profile_id" "uuid", "first_name" "text", "last_name" "text", "date_of_birth" "date", "gender" "text", "phone_number" "text", "email" "text", "address_line1" "text", "address_line2" "text", "city" "text", "state" "text", "zip_code" "text", "created_at" timestamp with time zone, "updated_at" timestamp with time zone)
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
    new_patient_record public.patients;
BEGIN
    IF NOT (
        (SELECT role FROM public.profiles WHERE id = auth.uid()) IN (
            'administrator',
            'clinician',
            'assistant',
            'financial_admin'
        )
    ) THEN
        RAISE EXCEPTION 'User does not have permission to create a patient.';
    END IF;

    IF p_first_name IS NULL OR p_first_name = '' THEN
        RAISE EXCEPTION 'First name cannot be empty.';
    END IF;
    IF p_last_name IS NULL OR p_last_name = '' THEN
        RAISE EXCEPTION 'Last name cannot be empty.';
    END IF;
    IF p_date_of_birth IS NULL THEN
        RAISE EXCEPTION 'Date of birth cannot be empty.';
    END IF;

    INSERT INTO public.patients (
        first_name, last_name, date_of_birth, gender, phone_number, email,
        address_line1, address_line2, city, state, zip_code, profile_id
    )
    VALUES (
        p_first_name, p_last_name, p_date_of_birth, p_gender, p_phone_number, p_email,
        p_address_line1, p_address_line2, p_city, p_state, p_zip_code, p_profile_id
    )
    RETURNING * INTO new_patient_record;

    RETURN QUERY SELECT * FROM public.patients WHERE public.patients.id = new_patient_record.id;
END;
$$;


ALTER FUNCTION "public"."create_patient"("p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_gender" "text", "p_phone_number" "text", "p_email" "text", "p_address_line1" "text", "p_address_line2" "text", "p_city" "text", "p_state" "text", "p_zip_code" "text", "p_profile_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."fts_policy_chunks"("query_text" "text", "match_count" integer DEFAULT 10) RETURNS TABLE("id" "uuid", "document_id" "uuid", "chunk_index" integer, "chunk_text" "text", "rank" double precision, "document_title" "text", "document_status" "text")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    pc.id,
    pc.document_id,
    pc.chunk_index,
    pc.chunk_text,
    ts_rank(pc.fts, websearch_to_tsquery('english', query_text)) AS rank,
    pd.title AS document_title,
    pd.status AS document_status
  FROM
    public.policy_chunks pc
  JOIN
    public.policy_documents pd ON pc.document_id = pd.id
  WHERE
    pc.fts @@ websearch_to_tsquery('english', query_text)
  ORDER BY
    rank DESC -- Order by rank descending
  LIMIT
    match_count;
END;
$$;


ALTER FUNCTION "public"."fts_policy_chunks"("query_text" "text", "match_count" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_available_functions"() RETURNS TABLE("schema" "text", "name" "text", "result_data_type" "text", "argument_data_types" "text", "type" "text", "security" "text")
    LANGUAGE "sql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
  SELECT 
    n.nspname::text AS schema,
    p.proname::text AS name,
    pg_catalog.pg_get_function_result(p.oid)::text AS result_data_type,
    pg_catalog.pg_get_function_arguments(p.oid)::text AS argument_data_types,
    CASE p.prokind
      WHEN 'f' THEN 'function'
      WHEN 'p' THEN 'procedure'
      WHEN 'a' THEN 'aggregate'
      WHEN 'w' THEN 'window'
    END::text AS type,
    CASE p.provolatile
      WHEN 'i' THEN 'immutable'
      WHEN 's' THEN 'stable'
      WHEN 'v' THEN 'volatile'
    END::text AS security
  FROM 
    pg_catalog.pg_proc p
    LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
  WHERE 
    n.nspname = 'public'
  ORDER BY 
    schema, name;
$$;


ALTER FUNCTION "public"."get_available_functions"() OWNER TO "postgres";


COMMENT ON FUNCTION "public"."get_available_functions"() IS 'Lists all available functions in the public schema';


SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "first_name" "text",
    "last_name" "text",
    "role" "public"."user_role" DEFAULT 'unassigned'::"public"."user_role" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_my_profile"() RETURNS SETOF "public"."profiles"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
  current_user_id uuid;
BEGIN
  -- Get the authenticated user's ID from Supabase auth.uid()
  current_user_id := auth.uid();
  
  -- Check if user is authenticated
  IF current_user_id IS NULL THEN
    RAISE EXCEPTION 'Not authenticated';
  END IF;
  
  -- Return the profile for the current user
  RETURN QUERY 
  SELECT * FROM public.profiles 
  WHERE id = current_user_id;
END;
$$;


ALTER FUNCTION "public"."get_my_profile"() OWNER TO "postgres";


COMMENT ON FUNCTION "public"."get_my_profile"() IS 'Gets the profile of the currently authenticated user';



CREATE TABLE IF NOT EXISTS "public"."patients" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "profile_id" "uuid",
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "date_of_birth" "date" NOT NULL,
    "gender" "text",
    "phone_number" "text",
    "email" "text",
    "address_line1" "text",
    "address_line2" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."patients" OWNER TO "postgres";


COMMENT ON TABLE "public"."patients" IS 'Stores detailed information about patients.';



COMMENT ON COLUMN "public"."patients"."profile_id" IS 'Links to the user profile if the patient themselves has a login.';



COMMENT ON COLUMN "public"."patients"."email" IS 'Patient\''s direct email, might be different from their user account email.';



COMMENT ON COLUMN "public"."patients"."is_active" IS 'Indicates if the patient record is active. Used for soft deletes.';



CREATE OR REPLACE FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") RETURNS SETOF "public"."patients"
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
  SELECT * FROM public.patients WHERE id = p_patient_id AND is_active = TRUE;
$$;


ALTER FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") OWNER TO "postgres";


COMMENT ON FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") IS 'Returns details for a specific active patient, identified by their ID. Access is controlled by RLS policies.';



CREATE OR REPLACE FUNCTION "public"."get_patient_list"() RETURNS SETOF "public"."patients"
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
  SELECT * FROM public.patients WHERE is_active = TRUE;
$$;


ALTER FUNCTION "public"."get_patient_list"() OWNER TO "postgres";


COMMENT ON FUNCTION "public"."get_patient_list"() IS 'Returns a list of all active patients. Access is controlled by RLS policies, ensuring users only see patients they are permitted to.';



CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO public.profiles (id, first_name, last_name, role)
  VALUES (new.id, '', '', 'unassigned')
  ON CONFLICT (id) DO NOTHING;
  RETURN new;
END;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."match_policy_chunks"("query_embedding" "extensions"."vector", "match_threshold" double precision DEFAULT 0.7, "match_count" integer DEFAULT 3) RETURNS TABLE("id" "uuid", "document_id" "uuid", "chunk_index" integer, "chunk_text" "text", "similarity" double precision, "document_title" "text", "document_status" "text", "metadata" "jsonb")
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    pc.id,
    pc.document_id,
    pc.chunk_index,
    pc.chunk_text,
    (1 - (pc.embedding <=> query_embedding)) AS similarity,
    pd.title AS document_title,
    pd.status AS document_status,
    pc.metadata
  FROM
    policy_chunks pc
  JOIN
    policy_documents pd ON pc.document_id = pd.id
  WHERE
    pc.embedding IS NOT NULL
    AND (1 - (pc.embedding <=> query_embedding)) > match_threshold
  ORDER BY
    pc.embedding <=> query_embedding
  LIMIT
    match_count;
END;
$$;


ALTER FUNCTION "public"."match_policy_chunks"("query_embedding" "extensions"."vector", "match_threshold" double precision, "match_count" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."prevent_audit_log_changes"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RAISE EXCEPTION 'Audit logs cannot be modified or deleted';
END;
$$;


ALTER FUNCTION "public"."prevent_audit_log_changes"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."set_current_timestamp_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  _new RECORD;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$;


ALTER FUNCTION "public"."set_current_timestamp_updated_at"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text" DEFAULT NULL::"text", "p_last_name" "text" DEFAULT NULL::"text", "p_date_of_birth" "date" DEFAULT NULL::"date", "p_sex" "text" DEFAULT NULL::"text", "p_gender" "text" DEFAULT NULL::"text", "p_address" "text" DEFAULT NULL::"text", "p_phone_number" "text" DEFAULT NULL::"text", "p_emergency_contact_name" "text" DEFAULT NULL::"text", "p_emergency_contact_phone" "text" DEFAULT NULL::"text", "p_preferred_language" "text" DEFAULT NULL::"text", "p_ethnicity" "text" DEFAULT NULL::"text", "p_race" "text" DEFAULT NULL::"text", "p_is_active" boolean DEFAULT NULL::boolean) RETURNS SETOF "public"."patients"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
  caller_user_id UUID := auth.uid();
  caller_role TEXT;
BEGIN
  -- Get the role of the currently authenticated user
  SELECT role INTO caller_role FROM public.user_roles WHERE user_id = caller_user_id;

  -- Check if the caller has the required role
  IF caller_role NOT IN ('administrator', 'clinician', 'assistant', 'financial_admin') THEN
    RAISE EXCEPTION 'User does not have permission to update patients.';
  END IF;

  UPDATE public.patients
  SET
    first_name = COALESCE(p_first_name, first_name),
    last_name = COALESCE(p_last_name, last_name),
    date_of_birth = COALESCE(p_date_of_birth, date_of_birth),
    sex = COALESCE(p_sex, sex),
    gender = COALESCE(p_gender, gender),
    address = COALESCE(p_address, address),
    phone_number = COALESCE(p_phone_number, phone_number),
    emergency_contact_name = COALESCE(p_emergency_contact_name, emergency_contact_name),
    emergency_contact_phone = COALESCE(p_emergency_contact_phone, emergency_contact_phone),
    preferred_language = COALESCE(p_preferred_language, preferred_language),
    ethnicity = COALESCE(p_ethnicity, ethnicity),
    race = COALESCE(p_race, race),
    is_active = COALESCE(p_is_active, is_active)
  WHERE id = p_id;
  
  RETURN QUERY SELECT * FROM public.patients WHERE id = p_id;
END;
$$;


ALTER FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_sex" "text", "p_gender" "text", "p_address" "text", "p_phone_number" "text", "p_emergency_contact_name" "text", "p_emergency_contact_phone" "text", "p_preferred_language" "text", "p_ethnicity" "text", "p_race" "text", "p_is_active" boolean) OWNER TO "postgres";


COMMENT ON FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_sex" "text", "p_gender" "text", "p_address" "text", "p_phone_number" "text", "p_emergency_contact_name" "text", "p_emergency_contact_phone" "text", "p_preferred_language" "text", "p_ethnicity" "text", "p_race" "text", "p_is_active" boolean) IS 'Allows authorized staff (administrator, clinician, assistant, financial_admin) to update patient details, including performing a soft delete by setting is_active to false. All updateable fields are optional in the function call; if a parameter is NULL, the existing value for that field is retained.';



CREATE OR REPLACE FUNCTION "public"."update_policy_document_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_policy_document_updated_at"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
   NEW.updated_at = timezone('utc'::text, now());
   RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."appointments" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "patient_id" "uuid" NOT NULL,
    "appointment_datetime" timestamp with time zone NOT NULL,
    "duration_minutes" integer DEFAULT 60,
    "service_type" "text",
    "practitioner_name" "text",
    "location" "text",
    "notes" "text",
    "status" "text" DEFAULT 'scheduled'::"text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid"
);


ALTER TABLE "public"."appointments" OWNER TO "postgres";


COMMENT ON TABLE "public"."appointments" IS 'Schedules and tracks patient appointments.';



COMMENT ON COLUMN "public"."appointments"."status" IS 'Current status of the appointment.';



COMMENT ON COLUMN "public"."appointments"."created_by" IS 'User ID of the staff member who scheduled the appointment.';



CREATE TABLE IF NOT EXISTS "public"."audit_logs" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "action" "text" NOT NULL,
    "resource_type" "text" NOT NULL,
    "resource_id" "text",
    "details" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
    "ip_address" "text",
    "user_agent" "text",
    "success" boolean DEFAULT true NOT NULL,
    "timestamp" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."audit_logs" OWNER TO "postgres";


COMMENT ON TABLE "public"."audit_logs" IS 'HIPAA-compliant audit logs for tracking all PHI access and modifications';



CREATE TABLE IF NOT EXISTS "public"."patient_documents" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "patient_id" "uuid" NOT NULL,
    "document_name" "text" NOT NULL,
    "document_type" "text",
    "file_storage_path" "text" NOT NULL,
    "file_mime_type" "text",
    "uploaded_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uploaded_by" "uuid",
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."patient_documents" OWNER TO "postgres";


COMMENT ON TABLE "public"."patient_documents" IS 'Manages documents related to patients, such as admission forms.';



COMMENT ON COLUMN "public"."patient_documents"."document_type" IS 'Category or type of the patient document.';



COMMENT ON COLUMN "public"."patient_documents"."file_storage_path" IS 'Full path to the file in Supabase Storage bucket for patient documents.';



COMMENT ON COLUMN "public"."patient_documents"."uploaded_by" IS 'User ID of the staff member who uploaded the document.';



CREATE TABLE IF NOT EXISTS "public"."patient_family_links" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "patient_id" "uuid" NOT NULL,
    "family_member_user_id" "uuid" NOT NULL,
    "relationship_type" "text",
    "is_active" boolean DEFAULT true NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."patient_family_links" OWNER TO "postgres";


COMMENT ON TABLE "public"."patient_family_links" IS 'Links family members (users with family_caregiver role) to patients they are authorized to access.';



COMMENT ON COLUMN "public"."patient_family_links"."family_member_user_id" IS 'User ID of the family member (profile with family_caregiver role).';



COMMENT ON COLUMN "public"."patient_family_links"."relationship_type" IS 'Describes the family relationship (e.g., Spouse, Parent).';



CREATE TABLE IF NOT EXISTS "public"."patient_portal_invitations" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "patient_id" "uuid" NOT NULL,
    "invitee_email" "text" NOT NULL,
    "invited_as_role" "public"."user_role" NOT NULL,
    "invitation_token" "text" DEFAULT "replace"(("gen_random_uuid"())::"text", '-'::"text", ''::"text") NOT NULL,
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "expires_at" timestamp with time zone NOT NULL,
    "invited_by_user_id" "uuid",
    "accepted_by_user_id" "uuid",
    "accepted_at" timestamp with time zone,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    CONSTRAINT "patient_portal_invitations_invited_as_role_check" CHECK (("invited_as_role" = ANY (ARRAY['patient'::"public"."user_role", 'family_caregiver'::"public"."user_role"])))
);


ALTER TABLE "public"."patient_portal_invitations" OWNER TO "postgres";


COMMENT ON TABLE "public"."patient_portal_invitations" IS 'Tracks invitations sent to patients and family members for portal access.';



COMMENT ON COLUMN "public"."patient_portal_invitations"."invited_as_role" IS 'Role assigned to the user upon accepting the invitation (patient or family_caregiver).';



COMMENT ON COLUMN "public"."patient_portal_invitations"."invitation_token" IS 'Secure, unique token for accepting the invitation.';



COMMENT ON COLUMN "public"."patient_portal_invitations"."status" IS 'Current status of the invitation.';



COMMENT ON COLUMN "public"."patient_portal_invitations"."accepted_by_user_id" IS 'User ID of the profile that accepted this invitation.';



CREATE TABLE IF NOT EXISTS "public"."policy_chunks" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "document_id" "uuid" NOT NULL,
    "chunk_index" integer NOT NULL,
    "chunk_text" "text" NOT NULL,
    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
    "embedding" "extensions"."vector"(1536),
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "fts" "tsvector" GENERATED ALWAYS AS ("to_tsvector"('"english"'::"regconfig", "chunk_text")) STORED
);


ALTER TABLE "public"."policy_chunks" OWNER TO "postgres";


COMMENT ON TABLE "public"."policy_chunks" IS 'Chunked text content from policy documents for search and AI processing';



CREATE TABLE IF NOT EXISTS "public"."policy_documents" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "title" "text" NOT NULL,
    "description" "text",
    "file_path" "text" NOT NULL,
    "file_name" "text" NOT NULL,
    "file_type" "text" NOT NULL,
    "file_size" integer NOT NULL,
    "version" "text",
    "status" "text" DEFAULT 'draft'::"text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "created_by" "uuid" NOT NULL,
    "updated_by" "uuid" NOT NULL,
    "effective_date" "date",
    "review_date" "date"
);


ALTER TABLE "public"."policy_documents" OWNER TO "postgres";


COMMENT ON TABLE "public"."policy_documents" IS 'Policies and Procedures (P&P) documents with metadata';



CREATE TABLE IF NOT EXISTS "public"."task_templates" (
    "task_template_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "workflow_template_id" "uuid" NOT NULL,
    "step_number" integer NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "relevant_policy_chunk_ids" "text"[],
    "is_required" boolean DEFAULT true,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."task_templates" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."workflow_templates" (
    "template_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."workflow_templates" OWNER TO "postgres";


ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "appointments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."audit_logs"
    ADD CONSTRAINT "audit_logs_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patient_documents"
    ADD CONSTRAINT "patient_documents_file_storage_path_key" UNIQUE ("file_storage_path");



ALTER TABLE ONLY "public"."patient_documents"
    ADD CONSTRAINT "patient_documents_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patient_family_links"
    ADD CONSTRAINT "patient_family_links_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_accepted_by_user_id_key" UNIQUE ("accepted_by_user_id");



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_invitation_token_key" UNIQUE ("invitation_token");



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_profile_id_key" UNIQUE ("profile_id");



ALTER TABLE ONLY "public"."policy_chunks"
    ADD CONSTRAINT "policy_chunks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."policy_documents"
    ADD CONSTRAINT "policy_documents_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."task_templates"
    ADD CONSTRAINT "task_templates_pkey" PRIMARY KEY ("task_template_id");



ALTER TABLE ONLY "public"."task_templates"
    ADD CONSTRAINT "task_templates_workflow_template_id_step_number_key" UNIQUE ("workflow_template_id", "step_number");



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "uq_patient_email_role" UNIQUE ("patient_id", "invitee_email", "invited_as_role");



ALTER TABLE ONLY "public"."patient_family_links"
    ADD CONSTRAINT "uq_patient_family_member" UNIQUE ("patient_id", "family_member_user_id");



ALTER TABLE ONLY "public"."workflow_templates"
    ADD CONSTRAINT "workflow_templates_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."workflow_templates"
    ADD CONSTRAINT "workflow_templates_pkey" PRIMARY KEY ("template_id");



CREATE INDEX "idx_appointments_datetime" ON "public"."appointments" USING "btree" ("appointment_datetime");



CREATE INDEX "idx_appointments_patient_id" ON "public"."appointments" USING "btree" ("patient_id");



CREATE INDEX "idx_audit_logs_action" ON "public"."audit_logs" USING "btree" ("action");



CREATE INDEX "idx_audit_logs_resource_id" ON "public"."audit_logs" USING "btree" ("resource_id");



CREATE INDEX "idx_audit_logs_resource_type" ON "public"."audit_logs" USING "btree" ("resource_type");



CREATE INDEX "idx_audit_logs_timestamp" ON "public"."audit_logs" USING "btree" ("timestamp");



CREATE INDEX "idx_audit_logs_user_id" ON "public"."audit_logs" USING "btree" ("user_id");



CREATE INDEX "idx_invitations_invitee_email" ON "public"."patient_portal_invitations" USING "btree" ("invitee_email");



CREATE INDEX "idx_invitations_patient_id" ON "public"."patient_portal_invitations" USING "btree" ("patient_id");



CREATE INDEX "idx_invitations_token" ON "public"."patient_portal_invitations" USING "btree" ("invitation_token");



CREATE INDEX "idx_patient_documents_patient_id" ON "public"."patient_documents" USING "btree" ("patient_id");



CREATE INDEX "idx_patient_family_links_patient_id" ON "public"."patient_family_links" USING "btree" ("patient_id");



CREATE INDEX "idx_patient_family_links_user_id" ON "public"."patient_family_links" USING "btree" ("family_member_user_id");



CREATE INDEX "idx_patients_profile_id" ON "public"."patients" USING "btree" ("profile_id");



CREATE INDEX "idx_policy_chunks_chunk_index" ON "public"."policy_chunks" USING "btree" ("chunk_index");



CREATE INDEX "idx_policy_chunks_document_id" ON "public"."policy_chunks" USING "btree" ("document_id");



CREATE INDEX "idx_policy_chunks_embedding_hnsw" ON "public"."policy_chunks" USING "hnsw" ("embedding" "extensions"."vector_cosine_ops");



CREATE INDEX "idx_policy_chunks_fts" ON "public"."policy_chunks" USING "gin" ("to_tsvector"('"english"'::"regconfig", "chunk_text"));



CREATE INDEX "idx_policy_documents_created_by" ON "public"."policy_documents" USING "btree" ("created_by");



CREATE INDEX "idx_policy_documents_status" ON "public"."policy_documents" USING "btree" ("status");



CREATE INDEX "idx_policy_documents_title" ON "public"."policy_documents" USING "btree" ("title");



CREATE INDEX "idx_task_templates_step_number" ON "public"."task_templates" USING "btree" ("workflow_template_id", "step_number");



CREATE INDEX "idx_task_templates_workflow_id" ON "public"."task_templates" USING "btree" ("workflow_template_id");



CREATE INDEX "policy_chunks_fts_idx" ON "public"."policy_chunks" USING "gin" ("fts");



CREATE OR REPLACE TRIGGER "handle_profile_updated_at" BEFORE UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "protect_audit_logs" BEFORE DELETE OR UPDATE ON "public"."audit_logs" FOR EACH ROW EXECUTE FUNCTION "public"."prevent_audit_log_changes"();



CREATE OR REPLACE TRIGGER "set_appointments_updated_at" BEFORE UPDATE ON "public"."appointments" FOR EACH ROW EXECUTE FUNCTION "public"."set_current_timestamp_updated_at"();



CREATE OR REPLACE TRIGGER "set_patient_documents_updated_at" BEFORE UPDATE ON "public"."patient_documents" FOR EACH ROW EXECUTE FUNCTION "public"."set_current_timestamp_updated_at"();



CREATE OR REPLACE TRIGGER "set_patient_family_links_updated_at" BEFORE UPDATE ON "public"."patient_family_links" FOR EACH ROW EXECUTE FUNCTION "public"."set_current_timestamp_updated_at"();



CREATE OR REPLACE TRIGGER "set_patient_portal_invitations_updated_at" BEFORE UPDATE ON "public"."patient_portal_invitations" FOR EACH ROW EXECUTE FUNCTION "public"."set_current_timestamp_updated_at"();



CREATE OR REPLACE TRIGGER "set_patients_updated_at" BEFORE UPDATE ON "public"."patients" FOR EACH ROW EXECUTE FUNCTION "public"."set_current_timestamp_updated_at"();



CREATE OR REPLACE TRIGGER "update_policy_document_timestamp" BEFORE UPDATE ON "public"."policy_documents" FOR EACH ROW EXECUTE FUNCTION "public"."update_policy_document_updated_at"();



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "appointments_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."appointments"
    ADD CONSTRAINT "appointments_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."audit_logs"
    ADD CONSTRAINT "audit_logs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."patient_documents"
    ADD CONSTRAINT "patient_documents_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."patient_documents"
    ADD CONSTRAINT "patient_documents_uploaded_by_fkey" FOREIGN KEY ("uploaded_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."patient_family_links"
    ADD CONSTRAINT "patient_family_links_family_member_user_id_fkey" FOREIGN KEY ("family_member_user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."patient_family_links"
    ADD CONSTRAINT "patient_family_links_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_accepted_by_user_id_fkey" FOREIGN KEY ("accepted_by_user_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_invited_by_user_id_fkey" FOREIGN KEY ("invited_by_user_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."patient_portal_invitations"
    ADD CONSTRAINT "patient_portal_invitations_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."policy_chunks"
    ADD CONSTRAINT "policy_chunks_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."policy_documents"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."policy_documents"
    ADD CONSTRAINT "policy_documents_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."policy_documents"
    ADD CONSTRAINT "policy_documents_updated_by_fkey" FOREIGN KEY ("updated_by") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."task_templates"
    ADD CONSTRAINT "task_templates_workflow_template_id_fkey" FOREIGN KEY ("workflow_template_id") REFERENCES "public"."workflow_templates"("template_id") ON DELETE CASCADE;



CREATE POLICY "Administrators can manage all policy chunks" ON "public"."policy_chunks" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role"]))))));



CREATE POLICY "Administrators can manage all policy documents" ON "public"."policy_documents" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role"]))))));



CREATE POLICY "Allow admin/clinician to delete patient documents" ON "public"."patient_documents" FOR DELETE TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role"])));



CREATE POLICY "Allow admin/clinician to insert patient documents" ON "public"."patient_documents" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role"])));



CREATE POLICY "Allow admin/clinician to update patient documents" ON "public"."patient_documents" FOR UPDATE TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role"]))) WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role"])));



CREATE POLICY "Allow admin/clinician/assistant to manage family links" ON "public"."patient_family_links" TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role"]))) WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role"])));



CREATE POLICY "Allow admin/staff to delete appointments" ON "public"."appointments" FOR DELETE TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"])));



CREATE POLICY "Allow admin/staff to insert appointments" ON "public"."appointments" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"])));



CREATE POLICY "Allow admin/staff to update appointments" ON "public"."appointments" FOR UPDATE TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"]))) WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"])));



CREATE POLICY "Allow family caregivers view patient simplified" ON "public"."patients" FOR SELECT USING ((("auth"."role"() = 'authenticated'::"text") AND (EXISTS ( SELECT 1
   FROM "public"."patient_family_links"
  WHERE (("patient_family_links"."patient_id" = "patients"."id") AND ("patient_family_links"."family_member_user_id" = "auth"."uid"()) AND ("patient_family_links"."is_active" = true))))));



CREATE POLICY "Allow family member to view their own links" ON "public"."patient_family_links" FOR SELECT TO "authenticated" USING ((("family_member_user_id" = "auth"."uid"()) AND (( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = 'family_caregiver'::"public"."user_role")));



CREATE POLICY "Allow individual user read access" ON "public"."profiles" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Allow individual user update" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Allow linked family caregivers to view patient appointments" ON "public"."appointments" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."patient_family_links" "pfl"
  WHERE (("pfl"."patient_id" = "appointments"."patient_id") AND ("pfl"."family_member_user_id" = "auth"."uid"()) AND ("pfl"."is_active" = true) AND (( SELECT "profiles"."role"
           FROM "public"."profiles"
          WHERE ("profiles"."id" = "auth"."uid"())) = 'family_caregiver'::"public"."user_role")))));



CREATE POLICY "Allow linked family caregivers to view patient documents" ON "public"."patient_documents" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."patient_family_links" "pfl"
  WHERE (("pfl"."patient_id" = "patient_documents"."patient_id") AND ("pfl"."family_member_user_id" = "auth"."uid"()) AND ("pfl"."is_active" = true) AND (( SELECT "profiles"."role"
           FROM "public"."profiles"
          WHERE ("profiles"."id" = "auth"."uid"())) = 'family_caregiver'::"public"."user_role")))));



CREATE POLICY "Allow patient to view their family links" ON "public"."patient_family_links" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."patients" "p"
  WHERE (("p"."id" = "patient_family_links"."patient_id") AND ("p"."profile_id" = "auth"."uid"()) AND (( SELECT "prof"."role"
           FROM "public"."profiles" "prof"
          WHERE ("prof"."id" = "auth"."uid"())) = 'patient'::"public"."user_role")))));



CREATE POLICY "Allow patients to view own record simplified" ON "public"."patients" FOR SELECT USING ((("auth"."role"() = 'authenticated'::"text") AND ("profile_id" = "auth"."uid"())));



CREATE POLICY "Allow patients to view their own appointments" ON "public"."appointments" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."patients" "p"
  WHERE (("p"."id" = "appointments"."patient_id") AND ("p"."profile_id" = "auth"."uid"()) AND (( SELECT "profiles"."role"
           FROM "public"."profiles"
          WHERE ("profiles"."id" = "auth"."uid"())) = 'patient'::"public"."user_role")))));



CREATE POLICY "Allow patients to view their own documents" ON "public"."patient_documents" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."patients" "p"
  WHERE (("p"."id" = "patient_documents"."patient_id") AND ("p"."profile_id" = "auth"."uid"()) AND (( SELECT "profiles"."role"
           FROM "public"."profiles"
          WHERE ("profiles"."id" = "auth"."uid"())) = 'patient'::"public"."user_role")))));



CREATE POLICY "Allow relevant staff to view family links" ON "public"."patient_family_links" FOR SELECT TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'assistant'::"public"."user_role", 'clinician'::"public"."user_role", 'hr_admin'::"public"."user_role", 'financial_admin'::"public"."user_role", 'case_manager'::"public"."user_role"])));



CREATE POLICY "Allow specified staff to insert patient records" ON "public"."patients" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"])));



CREATE POLICY "Allow specified staff to manage all invitations" ON "public"."patient_portal_invitations" TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role"]))) WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role"])));



CREATE POLICY "Allow specified staff to update patient records" ON "public"."patients" FOR UPDATE TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"]))) WITH CHECK ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'clinician'::"public"."user_role", 'assistant'::"public"."user_role", 'financial_admin'::"public"."user_role"])));



COMMENT ON POLICY "Allow specified staff to update patient records" ON "public"."patients" IS 'Allows administrator, clinician, assistant, financial_admin to update patient records, including setting them to inactive.';



CREATE POLICY "Allow staff to view all appointments" ON "public"."appointments" FOR SELECT TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role", 'clinician'::"public"."user_role", 'financial_admin'::"public"."user_role", 'assistant'::"public"."user_role"])));



CREATE POLICY "Allow staff to view all patient documents" ON "public"."patient_documents" FOR SELECT TO "authenticated" USING ((( SELECT "profiles"."role"
   FROM "public"."profiles"
  WHERE ("profiles"."id" = "auth"."uid"())) = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role", 'clinician'::"public"."user_role", 'financial_admin'::"public"."user_role", 'assistant'::"public"."user_role"])));



CREATE POLICY "Allow staff to view patients simplified" ON "public"."patients" FOR SELECT USING ((("auth"."role"() = 'authenticated'::"text") AND (EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role", 'clinician'::"public"."user_role", 'financial_admin'::"public"."user_role", 'assistant'::"public"."user_role"])))))));



CREATE POLICY "Allow user to view their accepted invitation" ON "public"."patient_portal_invitations" FOR SELECT TO "authenticated" USING ((("accepted_by_user_id" = "auth"."uid"()) AND ("status" = 'accepted'::"text")));



CREATE POLICY "Authenticated users can view chunks from published documents" ON "public"."policy_chunks" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."policy_documents"
  WHERE (("policy_documents"."id" = "policy_chunks"."document_id") AND ("policy_documents"."status" = 'published'::"text")))));



CREATE POLICY "Authenticated users can view published policy documents" ON "public"."policy_documents" FOR SELECT TO "authenticated" USING (("status" = 'published'::"text"));



CREATE POLICY "No one can update audit logs" ON "public"."audit_logs" FOR UPDATE TO "authenticated" USING (false);



CREATE POLICY "Only administrators can read audit logs" ON "public"."audit_logs" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = ANY (ARRAY['administrator'::"public"."user_role", 'hr_admin'::"public"."user_role"]))))));



CREATE POLICY "Only system admin can delete audit logs" ON "public"."audit_logs" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."profiles"
  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'administrator'::"public"."user_role")))));



CREATE POLICY "Users can create audit logs" ON "public"."audit_logs" FOR INSERT TO "authenticated" WITH CHECK (true);



ALTER TABLE "public"."audit_logs" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."patient_documents" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."patient_family_links" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."patient_portal_invitations" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."policy_chunks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."policy_documents" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."task_templates" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "task_templates_delete_policy" ON "public"."task_templates" FOR DELETE USING (true);



CREATE POLICY "task_templates_insert_policy" ON "public"."task_templates" FOR INSERT WITH CHECK (true);



CREATE POLICY "task_templates_select_policy" ON "public"."task_templates" FOR SELECT USING (true);



CREATE POLICY "task_templates_update_policy" ON "public"."task_templates" FOR UPDATE USING (true);



CREATE POLICY "temp_allow_all_authenticated_users" ON "public"."patients" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));



ALTER TABLE "public"."workflow_templates" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "workflow_templates_delete_policy" ON "public"."workflow_templates" FOR DELETE USING (true);



CREATE POLICY "workflow_templates_insert_policy" ON "public"."workflow_templates" FOR INSERT WITH CHECK (true);



CREATE POLICY "workflow_templates_select_policy" ON "public"."workflow_templates" FOR SELECT USING (true);



CREATE POLICY "workflow_templates_update_policy" ON "public"."workflow_templates" FOR UPDATE USING (true);





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
















































GRANT ALL ON TYPE "public"."user_role" TO "authenticated";




















































































































































































































































































































































































































































































GRANT ALL ON FUNCTION "public"."create_patient"("p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_gender" "text", "p_phone_number" "text", "p_email" "text", "p_address_line1" "text", "p_address_line2" "text", "p_city" "text", "p_state" "text", "p_zip_code" "text", "p_profile_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."create_patient"("p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_gender" "text", "p_phone_number" "text", "p_email" "text", "p_address_line1" "text", "p_address_line2" "text", "p_city" "text", "p_state" "text", "p_zip_code" "text", "p_profile_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_patient"("p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_gender" "text", "p_phone_number" "text", "p_email" "text", "p_address_line1" "text", "p_address_line2" "text", "p_city" "text", "p_state" "text", "p_zip_code" "text", "p_profile_id" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."fts_policy_chunks"("query_text" "text", "match_count" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."fts_policy_chunks"("query_text" "text", "match_count" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."fts_policy_chunks"("query_text" "text", "match_count" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_available_functions"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_available_functions"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_available_functions"() TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON FUNCTION "public"."get_my_profile"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_my_profile"() TO "service_role";



GRANT ALL ON TABLE "public"."patients" TO "anon";
GRANT ALL ON TABLE "public"."patients" TO "authenticated";
GRANT ALL ON TABLE "public"."patients" TO "service_role";



GRANT ALL ON FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_patient_details"("p_patient_id" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."get_patient_list"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_patient_list"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_patient_list"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";






GRANT ALL ON FUNCTION "public"."prevent_audit_log_changes"() TO "anon";
GRANT ALL ON FUNCTION "public"."prevent_audit_log_changes"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."prevent_audit_log_changes"() TO "service_role";



GRANT ALL ON FUNCTION "public"."set_current_timestamp_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."set_current_timestamp_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."set_current_timestamp_updated_at"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_sex" "text", "p_gender" "text", "p_address" "text", "p_phone_number" "text", "p_emergency_contact_name" "text", "p_emergency_contact_phone" "text", "p_preferred_language" "text", "p_ethnicity" "text", "p_race" "text", "p_is_active" boolean) TO "anon";
GRANT ALL ON FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_sex" "text", "p_gender" "text", "p_address" "text", "p_phone_number" "text", "p_emergency_contact_name" "text", "p_emergency_contact_phone" "text", "p_preferred_language" "text", "p_ethnicity" "text", "p_race" "text", "p_is_active" boolean) TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_patient"("p_id" "uuid", "p_first_name" "text", "p_last_name" "text", "p_date_of_birth" "date", "p_sex" "text", "p_gender" "text", "p_address" "text", "p_phone_number" "text", "p_emergency_contact_name" "text", "p_emergency_contact_phone" "text", "p_preferred_language" "text", "p_ethnicity" "text", "p_race" "text", "p_is_active" boolean) TO "service_role";



GRANT ALL ON FUNCTION "public"."update_policy_document_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_policy_document_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_policy_document_updated_at"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";






























GRANT ALL ON TABLE "public"."appointments" TO "anon";
GRANT ALL ON TABLE "public"."appointments" TO "authenticated";
GRANT ALL ON TABLE "public"."appointments" TO "service_role";



GRANT ALL ON TABLE "public"."audit_logs" TO "anon";
GRANT ALL ON TABLE "public"."audit_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."audit_logs" TO "service_role";



GRANT ALL ON TABLE "public"."patient_documents" TO "anon";
GRANT ALL ON TABLE "public"."patient_documents" TO "authenticated";
GRANT ALL ON TABLE "public"."patient_documents" TO "service_role";



GRANT ALL ON TABLE "public"."patient_family_links" TO "anon";
GRANT ALL ON TABLE "public"."patient_family_links" TO "authenticated";
GRANT ALL ON TABLE "public"."patient_family_links" TO "service_role";



GRANT ALL ON TABLE "public"."patient_portal_invitations" TO "anon";
GRANT ALL ON TABLE "public"."patient_portal_invitations" TO "authenticated";
GRANT ALL ON TABLE "public"."patient_portal_invitations" TO "service_role";



GRANT ALL ON TABLE "public"."policy_chunks" TO "anon";
GRANT ALL ON TABLE "public"."policy_chunks" TO "authenticated";
GRANT ALL ON TABLE "public"."policy_chunks" TO "service_role";



GRANT ALL ON TABLE "public"."policy_documents" TO "anon";
GRANT ALL ON TABLE "public"."policy_documents" TO "authenticated";
GRANT ALL ON TABLE "public"."policy_documents" TO "service_role";



GRANT ALL ON TABLE "public"."task_templates" TO "anon";
GRANT ALL ON TABLE "public"."task_templates" TO "authenticated";
GRANT ALL ON TABLE "public"."task_templates" TO "service_role";



GRANT ALL ON TABLE "public"."workflow_templates" TO "anon";
GRANT ALL ON TABLE "public"."workflow_templates" TO "authenticated";
GRANT ALL ON TABLE "public"."workflow_templates" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
